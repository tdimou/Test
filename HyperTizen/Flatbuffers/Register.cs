// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace hyperhdrnet
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Register : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Register GetRootAsRegister(ByteBuffer _bb) { return GetRootAsRegister(_bb, new Register()); }
  public static Register GetRootAsRegister(ByteBuffer _bb, Register obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Register __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Origin { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(4); }
  public int Priority { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<hyperhdrnet.Register> CreateRegister(FlatBufferBuilder builder,
      StringOffset originOffset = default(StringOffset),
      int priority = 0) {
    builder.StartTable(2);
    Register.AddPriority(builder, priority);
    Register.AddOrigin(builder, originOffset);
    return Register.EndRegister(builder);
  }

  public static void StartRegister(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(0, originOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(1, priority, 0); }
  public static Offset<hyperhdrnet.Register> EndRegister(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // origin
    return new Offset<hyperhdrnet.Register>(o);
  }
}


static public class RegisterVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Origin*/, true)
      && verifier.VerifyField(tablePos, 6 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
